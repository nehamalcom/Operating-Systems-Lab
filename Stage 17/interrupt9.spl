breakpoint;
alias processTableEntry R8;
alias inodeEntry R9;
alias PID R10;
alias userSP R11;
alias fileName R12;
alias ctr R13;
alias virtAddr R14;
alias phyAddr R15;

PID = [SYSTEM_STATUS_TABLE+1];
processTableEntry=PROCESS_TABLE+PID*16;
userSP = SP;
[processTableEntry + 13] = SP;
SP = [processTableEntry + 11]*512 - 1;
[processTableEntry + 9] = 9;

virtAddr = userSP - 4;
call AddrTranslation;
fileName = [phyAddr];

ctr = 0;
while(ctr<MAX_FILE_NUM)do
	if([INODE_TABLE+ctr*16+1] == fileName)then
		break;
	endif;
	ctr = ctr+1;
endwhile;

if( (ctr==MAX_FILE_NUM) || ([INODE_TABLE+ctr*16+0] != EXEC) )then
	virtAddr = userSP - 1;
	call AddrTranslation;
	[phyAddr] = -1;
	[processTableEntry + 9] = 0;
	SP = [processTableEntry+ 13];
	ireturn;
endif;
inodeEntry = ctr;
print(ctr);
multipush(R9,R10,R11,R12,R13,R14,R15);
R1=EXIT_PROCESS;
R2=PID;
call PROCESS_MANAGER;
multipop(R9,R10,R11,R12,R13,R14,R15);

[MEMORY_FREE_LIST + [processTableEntry + 11]] = [MEMORY_FREE_LIST + [processTableEntry + 11]] + 1;
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

SP = [processTableEntry + 11]*512 - 1;
[processTableEntry + 4] = RUNNING;

//library
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

//heap
multipush(R8,R9,R10,R11,R12,R13,R14,R15);
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
[PTBR+4]=R0;
[PTBR+5]="0110";
R1=GET_FREE_PAGE;
call MEMORY_MANAGER;
[PTBR+6]=R0;
[PTBR+7]="0110";
multipop(R8,R9,R10,R11,R12,R13,R14,R15);
//code
ctr = 0;
while( (ctr<[INODE_TABLE+ inodeEntry*16 + 2]) && (ctr<4))
do
	multipush(R8,R9,R10,R11,R12,R13,R14,R15);
	R1 = GET_FREE_PAGE;
	call MEMORY_MANAGER;
	multipop(R8,R9,R10,R11,R12,R13,R14,R15);
	[PTBR+8+2*ctr] = R0;
	[PTBR+8+2*ctr+1] = "0100";
	ctr = ctr+1;
endwhile;
//stack
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
[PTBR+16] = R0;
[PTBR+17] = "0110";
R1 = GET_FREE_PAGE;
call MEMORY_MANAGER;
[PTBR+18] = R0;
[PTBR+19] = "0110";
print("inodeentry");
print(inodeEntry);
//loading the code from disk to memory
ctr = 0;
while (ctr<=([INODE_TABLE+inodeEntry*16+2]/PAGE_SIZE) && (ctr<4) )do
	R1 = [PTBR + 8 + 2*ctr];
	R2 = [INODE_TABLE + inodeEntry*16 + 8 + ctr];
	loadi(R1,R2);
	ctr=ctr+1;
endwhile;
[[PTBR+16]*512] = [[PTBR+8]*512 + 1];
SP=8*512;
[processTableEntry + 9]=0;
ireturn;

AddrTranslation:
	R15=virtAddr/512;
	R15=[PTBR+2*R15];
	phyAddr=R15*512+virtAddr%512;
	return;


